- Architecture: 
	- MVVM 
		+ Model: like DTO 
		+ View Model: implement properties and commands which View data bind to and notify any state changes through the View through change notification events 
		+ View: define layout, appearance on the screen for user
- Pattern: 
	- Observer: if object changes, then it notifies the dependent objects and changes too
	- unit of work: Apply changes to database in one place, keep all repositories inside
	- repository: Implement services for all kind of model
	- specification: for dynamic and complex queries
- Technique: 
	- dependency injection (DI): register service
	- inversion of control (IoC): use service from ServiceManager